// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2016 13:59:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sumadorRestador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sumadorRestador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c1;
reg [31:0] p;
reg [31:0] q;
// wires                                               
wire c0;
wire [31:0] s;

// assign statements (if any)                          
sumadorRestador i1 (
// port map - connection between master ports and signals/registers   
	.c0(c0),
	.c1(c1),
	.p(p),
	.q(q),
	.s(s)
);
initial 
begin 
#1000000 $finish;
end 

// c1
initial
begin
	c1 = 1'b1;
end 
// q[ 31 ]
initial
begin
	q[31] = 1'b0;
end 
// q[ 30 ]
initial
begin
	q[30] = 1'b0;
end 
// q[ 29 ]
initial
begin
	q[29] = 1'b0;
end 
// q[ 28 ]
initial
begin
	q[28] = 1'b0;
end 
// q[ 27 ]
initial
begin
	q[27] = 1'b0;
end 
// q[ 26 ]
initial
begin
	q[26] = 1'b0;
end 
// q[ 25 ]
initial
begin
	q[25] = 1'b0;
end 
// q[ 24 ]
initial
begin
	q[24] = 1'b0;
end 
// q[ 23 ]
initial
begin
	q[23] = 1'b0;
end 
// q[ 22 ]
initial
begin
	q[22] = 1'b0;
end 
// q[ 21 ]
initial
begin
	q[21] = 1'b0;
end 
// q[ 20 ]
initial
begin
	q[20] = 1'b0;
end 
// q[ 19 ]
initial
begin
	q[19] = 1'b0;
end 
// q[ 18 ]
initial
begin
	q[18] = 1'b0;
end 
// q[ 17 ]
initial
begin
	q[17] = 1'b0;
end 
// q[ 16 ]
initial
begin
	q[16] = 1'b0;
end 
// q[ 15 ]
initial
begin
	q[15] = 1'b0;
end 
// q[ 14 ]
initial
begin
	q[14] = 1'b0;
end 
// q[ 13 ]
initial
begin
	q[13] = 1'b0;
end 
// q[ 12 ]
initial
begin
	q[12] = 1'b0;
end 
// q[ 11 ]
initial
begin
	q[11] = 1'b0;
end 
// q[ 10 ]
initial
begin
	q[10] = 1'b0;
end 
// q[ 9 ]
initial
begin
	q[9] = 1'b0;
end 
// q[ 8 ]
initial
begin
	q[8] = 1'b0;
end 
// q[ 7 ]
initial
begin
	q[7] = 1'b0;
end 
// q[ 6 ]
initial
begin
	q[6] = 1'b0;
end 
// q[ 5 ]
initial
begin
	q[5] = 1'b0;
end 
// q[ 4 ]
initial
begin
	q[4] = 1'b0;
end 
// q[ 3 ]
initial
begin
	q[3] = 1'b0;
end 
// q[ 2 ]
initial
begin
	q[2] = 1'b0;
end 
// q[ 1 ]
initial
begin
	q[1] = 1'b0;
end 
// q[ 0 ]
initial
begin
	q[0] = 1'b1;
end 
// p[ 31 ]
initial
begin
	p[31] = 1'b0;
end 
// p[ 30 ]
initial
begin
	p[30] = 1'b0;
end 
// p[ 29 ]
initial
begin
	p[29] = 1'b0;
end 
// p[ 28 ]
initial
begin
	p[28] = 1'b0;
end 
// p[ 27 ]
initial
begin
	p[27] = 1'b0;
end 
// p[ 26 ]
initial
begin
	p[26] = 1'b0;
end 
// p[ 25 ]
initial
begin
	p[25] = 1'b0;
end 
// p[ 24 ]
initial
begin
	p[24] = 1'b0;
end 
// p[ 23 ]
initial
begin
	p[23] = 1'b0;
end 
// p[ 22 ]
initial
begin
	p[22] = 1'b0;
end 
// p[ 21 ]
initial
begin
	p[21] = 1'b0;
end 
// p[ 20 ]
initial
begin
	p[20] = 1'b0;
end 
// p[ 19 ]
initial
begin
	p[19] = 1'b0;
end 
// p[ 18 ]
initial
begin
	p[18] = 1'b0;
end 
// p[ 17 ]
initial
begin
	p[17] = 1'b0;
end 
// p[ 16 ]
initial
begin
	p[16] = 1'b0;
end 
// p[ 15 ]
initial
begin
	p[15] = 1'b0;
end 
// p[ 14 ]
initial
begin
	p[14] = 1'b0;
end 
// p[ 13 ]
initial
begin
	p[13] = 1'b0;
end 
// p[ 12 ]
initial
begin
	p[12] = 1'b0;
end 
// p[ 11 ]
initial
begin
	p[11] = 1'b0;
end 
// p[ 10 ]
initial
begin
	p[10] = 1'b0;
end 
// p[ 9 ]
initial
begin
	p[9] = 1'b0;
end 
// p[ 8 ]
initial
begin
	p[8] = 1'b0;
end 
// p[ 7 ]
initial
begin
	p[7] = 1'b0;
end 
// p[ 6 ]
initial
begin
	p[6] = 1'b0;
end 
// p[ 5 ]
initial
begin
	p[5] = 1'b0;
end 
// p[ 4 ]
initial
begin
	p[4] = 1'b0;
end 
// p[ 3 ]
initial
begin
	p[3] = 1'b0;
end 
// p[ 2 ]
initial
begin
	p[2] = 1'b0;
end 
// p[ 1 ]
initial
begin
	p[1] = 1'b1;
end 
// p[ 0 ]
initial
begin
	p[0] = 1'b0;
end 
endmodule

