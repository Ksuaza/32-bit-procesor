// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2016 00:50:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BancoDeRegistros
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BancoDeRegistros_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Data;
reg [2:0] Destino;
reg [2:0] Fuente1;
reg [2:0] Fuente2;
reg W;
// wires                                               
wire [31:0] A;
wire [31:0] B;

// assign statements (if any)                          
BancoDeRegistros i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Data(Data),
	.Destino(Destino),
	.Fuente1(Fuente1),
	.Fuente2(Fuente2),
	.W(W)
);
initial 
begin 
#1000000 $finish;
end 
// Data[ 31 ]
initial
begin
	Data[31] = 1'b0;
end 
// Data[ 30 ]
initial
begin
	Data[30] = 1'b0;
end 
// Data[ 29 ]
initial
begin
	Data[29] = 1'b0;
end 
// Data[ 28 ]
initial
begin
	Data[28] = 1'b0;
end 
// Data[ 27 ]
initial
begin
	Data[27] = 1'b0;
end 
// Data[ 26 ]
initial
begin
	Data[26] = 1'b0;
end 
// Data[ 25 ]
initial
begin
	Data[25] = 1'b0;
end 
// Data[ 24 ]
initial
begin
	Data[24] = 1'b0;
end 
// Data[ 23 ]
initial
begin
	Data[23] = 1'b0;
end 
// Data[ 22 ]
initial
begin
	Data[22] = 1'b0;
end 
// Data[ 21 ]
initial
begin
	Data[21] = 1'b0;
end 
// Data[ 20 ]
initial
begin
	Data[20] = 1'b0;
end 
// Data[ 19 ]
initial
begin
	Data[19] = 1'b0;
end 
// Data[ 18 ]
initial
begin
	Data[18] = 1'b0;
end 
// Data[ 17 ]
initial
begin
	Data[17] = 1'b0;
end 
// Data[ 16 ]
initial
begin
	Data[16] = 1'b0;
end 
// Data[ 15 ]
initial
begin
	Data[15] = 1'b0;
end 
// Data[ 14 ]
initial
begin
	Data[14] = 1'b0;
end 
// Data[ 13 ]
initial
begin
	Data[13] = 1'b0;
end 
// Data[ 12 ]
initial
begin
	Data[12] = 1'b0;
end 
// Data[ 11 ]
initial
begin
	Data[11] = 1'b0;
end 
// Data[ 10 ]
initial
begin
	Data[10] = 1'b0;
end 
// Data[ 9 ]
initial
begin
	Data[9] = 1'b0;
end 
// Data[ 8 ]
initial
begin
	Data[8] = 1'b0;
end 
// Data[ 7 ]
initial
begin
	Data[7] = 1'b0;
end 
// Data[ 6 ]
initial
begin
	Data[6] = 1'b0;
end 
// Data[ 5 ]
initial
begin
	Data[5] = 1'b0;
end 
// Data[ 4 ]
initial
begin
	Data[4] = 1'b0;
end 
// Data[ 3 ]
initial
begin
	Data[3] = 1'b0;
end 
// Data[ 2 ]
initial
begin
	Data[2] = 1'b0;
end 
// Data[ 1 ]
initial
begin
	Data[1] = 1'b0;
end 
// Data[ 0 ]
initial
begin
	Data[0] = 1'b1;
end 
// Destino[ 2 ]
initial
begin
	Destino[2] = 1'b0;
end 
// Destino[ 1 ]
initial
begin
	Destino[1] = 1'b0;
	Destino[1] = #800000 1'b1;
end 
// Destino[ 0 ]
initial
begin
	Destino[0] = 1'b0;
	Destino[0] = #400000 1'b1;
	Destino[0] = #400000 1'b0;
end 
// Fuente1[ 2 ]
initial
begin
	Fuente1[2] = 1'b0;
end 
// Fuente1[ 1 ]
initial
begin
	Fuente1[1] = 1'b0;
end 
// Fuente1[ 0 ]
initial
begin
	Fuente1[0] = 1'b0;
end 
// Fuente2[ 2 ]
initial
begin
	Fuente2[2] = 1'b0;
end 
// Fuente2[ 1 ]
initial
begin
	Fuente2[1] = 1'b0;
end 
// Fuente2[ 0 ]
initial
begin
	Fuente2[0] = 1'b1;
end 

// W
always
begin
	W = 1'b0;
	W = #10000 1'b1;
	#10000;
end 
endmodule

