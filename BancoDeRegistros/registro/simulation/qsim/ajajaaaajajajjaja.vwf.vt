// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/02/2016 22:25:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          registro
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module registro_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] D;
reg EN;
reg [31:0] treg_Q;
// wires                                               
wire [31:0] Q;

// assign statements (if any)                          
assign Q = treg_Q;
registro i1 (
// port map - connection between master ports and signals/registers   
	.D(D),
	.EN(EN),
	.Q(Q)
);
initial 
begin 
#1000000 $finish;
end 
// D[ 31 ]
initial
begin
	D[31] = 1'b0;
end 
// D[ 30 ]
initial
begin
	D[30] = 1'b0;
end 
// D[ 29 ]
initial
begin
	D[29] = 1'b0;
end 
// D[ 28 ]
initial
begin
	D[28] = 1'b0;
end 
// D[ 27 ]
initial
begin
	D[27] = 1'b0;
end 
// D[ 26 ]
initial
begin
	D[26] = 1'b0;
end 
// D[ 25 ]
initial
begin
	D[25] = 1'b0;
end 
// D[ 24 ]
initial
begin
	D[24] = 1'b0;
end 
// D[ 23 ]
initial
begin
	D[23] = 1'b0;
end 
// D[ 22 ]
initial
begin
	D[22] = 1'b0;
end 
// D[ 21 ]
initial
begin
	D[21] = 1'b0;
end 
// D[ 20 ]
initial
begin
	D[20] = 1'b0;
end 
// D[ 19 ]
initial
begin
	D[19] = 1'b0;
end 
// D[ 18 ]
initial
begin
	D[18] = 1'b0;
end 
// D[ 17 ]
initial
begin
	D[17] = 1'b0;
end 
// D[ 16 ]
initial
begin
	D[16] = 1'b0;
end 
// D[ 15 ]
initial
begin
	D[15] = 1'b0;
end 
// D[ 14 ]
initial
begin
	D[14] = 1'b0;
end 
// D[ 13 ]
initial
begin
	D[13] = 1'b0;
end 
// D[ 12 ]
initial
begin
	D[12] = 1'b0;
end 
// D[ 11 ]
initial
begin
	D[11] = 1'b0;
end 
// D[ 10 ]
initial
begin
	D[10] = 1'b0;
end 
// D[ 9 ]
initial
begin
	D[9] = 1'b0;
end 
// D[ 8 ]
initial
begin
	D[8] = 1'b0;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b0;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b0;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
	D[3] = #640000 1'b1;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b0;
	D[2] = #320000 1'b1;
	D[2] = #320000 1'b0;
	D[2] = #320000 1'b1;
end 
// D[ 1 ]
initial
begin
	repeat(3)
	begin
		D[1] = 1'b0;
		D[1] = #160000 1'b1;
		# 160000;
	end
	D[1] = 1'b0;
end 
// D[ 0 ]
initial
begin
	repeat(6)
	begin
		D[0] = 1'b0;
		D[0] = #80000 1'b1;
		# 80000;
	end
	D[0] = 1'b0;
end 

// EN
initial
begin
	EN = 1'b0;
	EN = #40000 1'b1;
	EN = #760000 1'b0;
	EN = #40000 1'b1;
	EN = #40000 1'b0;
	EN = #40000 1'b1;
	EN = #40000 1'b0;
end 
// Q[ 31 ]
initial
begin
	treg_Q[31] = 1'bZ;
end 
// Q[ 30 ]
initial
begin
	treg_Q[30] = 1'bZ;
end 
// Q[ 29 ]
initial
begin
	treg_Q[29] = 1'bZ;
end 
// Q[ 28 ]
initial
begin
	treg_Q[28] = 1'bZ;
end 
// Q[ 27 ]
initial
begin
	treg_Q[27] = 1'bZ;
end 
// Q[ 26 ]
initial
begin
	treg_Q[26] = 1'bZ;
end 
// Q[ 25 ]
initial
begin
	treg_Q[25] = 1'bZ;
end 
// Q[ 24 ]
initial
begin
	treg_Q[24] = 1'bZ;
end 
// Q[ 23 ]
initial
begin
	treg_Q[23] = 1'bZ;
end 
// Q[ 22 ]
initial
begin
	treg_Q[22] = 1'bZ;
end 
// Q[ 21 ]
initial
begin
	treg_Q[21] = 1'bZ;
end 
// Q[ 20 ]
initial
begin
	treg_Q[20] = 1'bZ;
end 
// Q[ 19 ]
initial
begin
	treg_Q[19] = 1'bZ;
end 
// Q[ 18 ]
initial
begin
	treg_Q[18] = 1'bZ;
end 
// Q[ 17 ]
initial
begin
	treg_Q[17] = 1'bZ;
end 
// Q[ 16 ]
initial
begin
	treg_Q[16] = 1'bZ;
end 
// Q[ 15 ]
initial
begin
	treg_Q[15] = 1'bZ;
end 
// Q[ 14 ]
initial
begin
	treg_Q[14] = 1'bZ;
end 
// Q[ 13 ]
initial
begin
	treg_Q[13] = 1'bZ;
end 
// Q[ 12 ]
initial
begin
	treg_Q[12] = 1'bZ;
end 
// Q[ 11 ]
initial
begin
	treg_Q[11] = 1'bZ;
end 
// Q[ 10 ]
initial
begin
	treg_Q[10] = 1'bZ;
end 
// Q[ 9 ]
initial
begin
	treg_Q[9] = 1'bZ;
end 
// Q[ 8 ]
initial
begin
	treg_Q[8] = 1'bZ;
end 
// Q[ 7 ]
initial
begin
	treg_Q[7] = 1'bZ;
end 
// Q[ 6 ]
initial
begin
	treg_Q[6] = 1'bZ;
end 
// Q[ 5 ]
initial
begin
	treg_Q[5] = 1'bZ;
end 
// Q[ 4 ]
initial
begin
	treg_Q[4] = 1'bZ;
end 
// Q[ 3 ]
initial
begin
	treg_Q[3] = 1'bZ;
end 
// Q[ 2 ]
initial
begin
	treg_Q[2] = 1'bZ;
end 
// Q[ 1 ]
initial
begin
	treg_Q[1] = 1'bZ;
end 
// Q[ 0 ]
initial
begin
	treg_Q[0] = 1'bZ;
end 
endmodule

